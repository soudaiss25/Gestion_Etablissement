pipeline {
    agent any

    tools {
        nodejs "nodeJs"
         dockerTool "docker"
    }
  

    environment {
        DOCKER_IMAGE = "gestion-etablissement"
        GIT_REPO = "https://github.com/soudaiss25/gestion_etablissement.git"
    }

    stages {
         
        stage('Install dependencies') {
             steps {
                 sh 'node -v'
                 sh 'python3 --version'
                 sh 'pip3 --version'
             }
         }
   

        stage('Checkout') {
            steps {
                git branch: 'master', url: "${GIT_REPO}"
            }
        }
//               stage('SonarQube Analysis') {
//          steps {
//         script {
//                 sh 'ls -la $WORKSPACE'
//                         withSonarQubeEnv('sonar') {
//                  sh '''
//                     #!/bin/bash
//                     sonar-scanner \
//                     -Dsonar.projectBaseDir=$WORKSPACE/
//                     -Dsonar.login=squ_5341055fa9b66b94bb732d572552d2f53bbcefb
//                 '''
// }
//         }
//     }
//   }
        stage('Package & Upload Artifacts') {
    steps {
        sh 'zip -r build.zip build/'
        nexusArtifactUploader artifacts: [[artifactId: 'my-app', type: 'zip', classifier: '', file: 'build.zip']], credentialsId: 'nexus-cred', groupId: 'com.mycompany', nexusUrl: 'http://nexus:8081/repository/maven-releases/'
    }
}

        stage('Build Frontend') {
            steps {
                dir('frontend') {
                    sh 'npm install'
                    sh 'npm run build'
                }
            }
        }

        stage('Install Dependencies - Django') {
            steps {
                sh '''
                    python3 -m venv venv
                    . venv/bin/activate
                    pip install -r requirements.txt
                '''
            }
        }

        stage('Run Django') {
            steps {
                sh '''
                    #!/bin/bash
                    . venv/bin/activate
                    python3 backend/manage.py runserver 0.0.0.0:8000 &
                '''
            }
        }

        stage('Test Backend') {
            steps {
                sh '''
                    #!/bin/bash
                    . venv/bin/activate
                    python3 backend/manage.py test
                '''
            }
        }

//    stage('Docker Build & Push') {
//     steps {
//         script {
//             withCredentials([usernamePassword(credentialsId: 'docker-hub-credentials', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                
//                 sh '''
//                     # Build et push du frontend
//                     docker build -t ${DOCKER_USER}/${DOCKER_IMAGE}_frontend:${BUILD_NUMBER} -f frontend.dockerfile .
//                     docker tag ${DOCKER_USER}/${DOCKER_IMAGE}_frontend:${BUILD_NUMBER} ${DOCKER_USER}/${DOCKER_IMAGE}_frontend:latest
//                     echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin
//                     docker push ${DOCKER_USER}/${DOCKER_IMAGE}_frontend:${BUILD_NUMBER}
//                     docker push ${DOCKER_USER}/${DOCKER_IMAGE}_frontend:latest
//                 '''

//                 sh '''
//                     # Build et push du backend
//                     docker build -t ${DOCKER_USER}/${DOCKER_IMAGE}_backend:${BUILD_NUMBER} -f backend.dockerfile .
//                     docker tag ${DOCKER_USER}/${DOCKER_IMAGE}_backend:${BUILD_NUMBER} ${DOCKER_USER}/${DOCKER_IMAGE}_backend:latest
//                     echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin
//                     docker push ${DOCKER_USER}/${DOCKER_IMAGE}_backend:${BUILD_NUMBER}
//                     docker push ${DOCKER_USER}/${DOCKER_IMAGE}_backend:latest
//                 '''
//             }
//         }
//     }
// }
// stage('Deploiement avec Terraform') {
//     steps {
//         sh 'terraform init'
//         sh 'terraform apply -auto-approve'
//     }
// }

        // stage('Deploy') {
        //     steps {
        //         sh '''
        //             docker stop gestion-etablissement || true
        //             docker rm gestion-etablissement || true
        //             docker run -d --name gestion-etablissement -p 8080:8080 ${DOCKER_IMAGE}:latest
        //         '''
        //     }
        // }
    }
}
