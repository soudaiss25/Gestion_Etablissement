pipeline {
    agent any

    tools {
        nodejs "nodeJs"
       
    }

    environment {
        DOCKER_IMAGE = "gestion-etablissement"
        GIT_REPO = "https://github.com/soudaiss25/gestion_etablissement.git"
    }

    stages {
        stage('Install dependencies') {
            steps {
                sh 'node -v'
                sh 'python3 --version'
                sh 'pip3 --version'
            }
        }

        stage('Checkout') {
            steps {
                git branch: 'master', url: "${GIT_REPO}"
            }
        }

         stage('Install Dependencies - Django') {
             steps {
                 
                  sh 'python3 -m venv venv'
                  sh '. venv/bin/activate'
                 
                  sh'pip3 install asgiref==3.8.1 Django==5.1.6 django-cors-headers==4.7.0 djangorestframework==3.15.2 djangorestframework_simplejwt==5.5.0 psycopg2-binary==2.9.10 PyJWT==2.9.0 sqlparse==0.5.3 tzdata==2025.'
                 // dir('backend') {
                    
                    
                 // }
               }
         }

        stage('Apply Migrations') {
            steps {
                dir('backend') {
                    sh 'python3 manage.py runserver'
                }
            }
        }

        // stage('Collect Static Files') {
        //     steps {
        //         dir('backend') {
        //             sh 'python3 manage.py collectstatic --noinput'
        //         }
        //     }
        // }

        stage('Test Backend') {
            steps {
                dir('backend') {
                    sh 'python3 manage.py test'  // Ex√©cute les tests Django
                }
            }
        }

        stage('Build Frontend') {
            steps {
                dir('frontend') {
                    sh 'npm install'
                    sh 'npm run build'
                }
            }
        }

        stage('Test Frontend') {
            steps {
                dir('frontend') {
                    sh 'npm test'
                }
            }
        }

        stage('Docker Build & Push') {
            steps {
                sh '''
                docker build -t ${DOCKER_IMAGE}:latest .
                echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin
                docker push ${DOCKER_IMAGE}:latest
                '''
            }
        }

        stage('Deploy') {
            steps {
                sh '''
                docker stop gestion-etablissement || true
                docker rm gestion-etablissement || true
                docker run -d --name gestion-etablissement -p 8080:8080 ${DOCKER_IMAGE}:latest
                '''
            }
        }
    }
}
